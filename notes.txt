
JSX

-You can put any JavaScript expression within braces inside JSX. 
-Each React element is a real JavaScript object that you can store in a variable or pass around your program.

-No quotes around attributes like you would expect in Angular
<Square value={i} />
<button className="square" onClick={() => alert('click')}>
                {this.props.value}
            </button>




State

-React components can have state by setting this.state in the constructor, 
which should be considered private to the component. 
-In JavaScript classes, you need to explicitly call super(); when defining the constructor of a subclass.


class Square extends React.Component {
  constructor() {
    super();
    this.state = {
      value: null,
    };
  }

  render() {
    return (
      <button className="square" onClick={() => alert('click')}>
        {this.props.value}
      </button>
    );
  }
}
            
Set State

this.setState({value: 'X'});

Whenever this.setState is called, an update to the component is scheduled, causing React to merge in the passed state update and rerender the component along with its descendants.



Chrome Extension

The React Devtools extension for Chrome and Firefox lets you inspect a React component tree in your browser devtools.

After installing it, you can right-click any element on the page, click "Inspect" to open the developer tools, and the React tab will appear as the last tab to the right.


Move State UP

When you want to aggregate data from multiple children or to have two child components communicate with each other, move the state upwards so that it lives in the parent component. The parent can then pass the state back down to the children via props, so that the child components are always in sync with each other and with the parent.

Array(9).fill(null),



CHANGE WITHOUT MUTATION

Event handling

 handleClick(i) {
    const squares = this.state.squares.slice();
    squares[i] = 'X';
    this.setState({squares: squares});
  }

We call .slice() to copy the squares array instead of mutating the existing array.

var player = {score: 1, name: 'Jeff'};

var newPlayer = Object.assign({}, player, {score: 2});
// Now player is unchanged, but newPlayer is {score: 2, name: 'Jeff'}

// Or if you are using object spread syntax proposal, you can write:
// var newPlayer = {...player, score: 2};





Controlled Components - Parent control's its state

Square no longer keeps its own state; it receives its value from its parent Board and informs its parent when it's clicked. We call components like this controlled components.


FUNCTIONAL COMPONENTS

We've removed the constructor, and in fact, React supports a simpler syntax called functional components for component types like Square that only consist of a render method. Rather than define a class extending React.Component, simply write a function that takes props and returns what should be rendered.


KEYS

<li key={user.id}>{user.name}: {user.taskCount} tasks left</li>


Warning: Each child in an array or iterator should have a unique "key" prop. Check the render method of "Game".

key is a special property that's reserved by React (along with ref, a more advanced feature). When an element is created, React pulls off the key property and stores the key directly on the returned element. Even though it may look like it is part of props, it cannot be referenced with this.props.key. React uses the key automatically while deciding which children to update; there is no way for a component to inquire about its own key.


